@page "/ChatRoom"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Bot.UI.Model
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Web
@using System.Text.Json.Serialization
@inject Chat.Bot.UI.Services.ChatBotService chatbotService;
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Chat Group:
        <select for="Room" class="form-control" @onchange="LoadMessages">
            <option value="default">--select--</option>
            @foreach (var room in rooms)
            {
                <option value="@room.RoomId">
                    @room.RoomName
                </option>
            }
        </select>
    </label>
</div>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.UserId @message.Text at @message.DtInserted</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private IEnumerable<Room> rooms = Array.Empty<Room>();
    private Room room = new Room();
    private User user = new User();
    private Message message = new Message();
    private string messageInput = string.Empty;
    private int messagesQty = 50;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(chatbotService.GetBaseUrl() + "chat")
            .Build();

        hubConnection.On<Message>("Message", (messageReceived) =>
        {
            var encodedMsg = $"{user.Name}: {messageReceived.Text} at {messageReceived.DtInserted}";
            messages.Add(messageReceived);
            QuantityMessagesAllowed();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadRooms();
    }

    private void QuantityMessagesAllowed()
    {
        if(messages.Count > messagesQty)
        {
            messages.RemoveAt(0);
        }
    }

    private async Task LoadMessages(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            if (e.Value.ToString() != "default")
            {
                var roomId = new Guid(e.Value.ToString());
                room = rooms.First(f => f.RoomId == roomId);

                var builder = new UriBuilder(chatbotService.GetBaseUrl() + "chat/GetLastMessages");
                var query = HttpUtility.ParseQueryString(builder.Query);
                query["messageQty"] = messagesQty.ToString();
                query["roomId"] = roomId.ToString();

                builder.Query = query.ToString();

                var request = new HttpRequestMessage(HttpMethod.Get, builder.ToString());

                var client = ClientFactory.CreateClient();

                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    var messagesReceived = await JsonSerializer.DeserializeAsync<IEnumerable<Message>>(responseStream);
                    messages = messagesReceived.OrderBy(o => o.DtInserted).ToList();
                }
            }
            else
                messages = new List<Message>();
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            var message = new Message();
            message.Text = messageInput;

            user.UserId = new Guid("CB231A7C-A41B-4AF4-80F1-131BFD7D7897");
            user.Name = "Teste";

            message.UserId = user.UserId;
            message.RoomId = room.RoomId;
            message.DtInserted = DateTime.Now;

            await hubConnection.SendAsync("SendMessage", message);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task LoadRooms()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, chatbotService.GetBaseUrl() + "room/GetAllRoom");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            rooms = await JsonSerializer.DeserializeAsync<IEnumerable<Room>>(responseStream);
        }
    }
}