@page "/ChatRoom"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Bot.UI.Model
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text.Json.Serialization
@inject Chat.Bot.UI.Services.ChatBotService chatbotService;
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Chat Group:
        <select for="Room" class="form-control" @bind="@room.RoomId">
            <option>--select--</option>
            @foreach (var room in rooms)
            {
                <option value="@room.RoomId">
                    @room.RoomName
                </option>
            }
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private IEnumerable<Room> rooms = Array.Empty<Room>();
    private Room room = new Room();
    private string? userInput;
    private string? messageInput;
    private string? chatInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(chatbotService.GetBaseUrl() + "chat")
            .Build();

        hubConnection.On<string, string>("Message", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadChats();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task LoadChats()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, chatbotService.GetBaseUrl() + "room/GetAllRoom");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            rooms = await JsonSerializer.DeserializeAsync<IEnumerable<Room>>(responseStream);
        }
    }
}