@page "/"
<PageTitle>Index</PageTitle>

<h3>
    Welcome to Stock Quotes
</h3>

@using Chat.Bot.UI.Model;
@*@inject Chat.Bot.UI.Services.IAlertService AlertService*@
@inject NavigationManager NavigationManager
@inject Chat.Bot.UI.Services.ChatBotService chatbotService;
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="user.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="AddUser" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private User user = new User();
    private bool loading;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        //AlertService.Clear();

        loading = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, chatbotService.GetBaseUrl() + "User/Authenticate");

            var requestJson = JsonSerializer.Serialize(user);
            var data = new StringContent(requestJson, Encoding.UTF8, "application/json");
            request.Content = data;

            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                var userAuthenticated = await JsonSerializer.DeserializeAsync<Room>(responseStream);

            }
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}