@page "/createroom"
@using Chat.Bot.UI.Model
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.SignalR.Client
@inject Config config
@inject NavigationManager navigationManager
@inject Config chatbotService;
@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService _localStorage

<h3>
    Add Room
</h3>

<EditForm Model="room" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="rname">Room Name</label>
        <InputText Id="email" Class="form-control" @bind-Value="room.RoomName" />
        <ValidationMessage For="@(() => room.RoomName)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>


@code {
    Room room = new Room();

    protected async Task Create()
    {
        var token = await _localStorage.GetItemAsync<string>("authToken");
        var request = new HttpRequestMessage(HttpMethod.Post, chatbotService.GetBaseUrl() + "/Room/CreateRoom");
        request.Headers.Authorization = new AuthenticationHeaderValue("bearer", token);

        var requestJson = JsonSerializer.Serialize(room);
        var data = new StringContent(requestJson, Encoding.UTF8, "application/json");
        request.Content = data;

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            room = await JsonSerializer.DeserializeAsync<Room>(responseStream);

            await AddBotsToRoom(token, room);
            Cancel();
        }
    }

    private async Task AddBotsToRoom(string token, Room room)
    {
        var hubConnection = new HubConnectionBuilder()
        .WithUrl(config.GetBaseUrl() + "/Chat", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
            options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
            options.SkipNegotiation = true;
        })
        .Build();

        await hubConnection.StartAsync();

        if (hubConnection is not null)
            await hubConnection.InvokeAsync("AddBotsToNewGroup", (room));
    }

    void Cancel() => navigationManager.NavigateTo("/listRoom");
}